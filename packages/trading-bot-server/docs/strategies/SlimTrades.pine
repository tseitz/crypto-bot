//@version=4
strategy("SlimTrades", overlay=true, calc_on_every_tick=false, initial_capital=100, default_qty_value=100, default_qty_type=strategy.cash, currency=currency.USD)

// THIS STRAT WORKS IN SUPER LONG TIMES. GETS WRECKED BY SHORTS AND HEAVY DIPS

// VARIABLES
var isLong = false
var isShort = false
var shortZone = false
var longZone = false
var firstAction = false
var lowSlowCount = 0
var highSlowCount = 0
var lowFastCount = 0
var highFastCount = 0
var addHighCount = 0
var addLowCount = 0
var longCount = 0
var shortCount = 0
var entryPrice = 0.0
var prevPriceLow = 0.0
var lastMacd = 0.0
var lastRsi = 0.0
var stoppedOut = false


// INPUTS
daysBackMax = input(defval=18, title="Max Days Back to Test", minval=0)
daysBackMin = 0
msBackMax = 1000 * 60 * 60 * 24 * daysBackMax
msBackMin = 1000 * 60 * 60 * 24 * daysBackMin
isWithinTimeBounds = (msBackMax == 0 or (time > (timenow - msBackMax))) and (msBackMin == 0 or (time < (timenow - msBackMin)))

// hiLowFast = input(defval=210, title="Hi Low Short", minval=0, step=5)
hiLowSlow = input(defval=420, title="Hi Low Long", minval=0, step=10)
hiLowSuperSlow = input(defval=7200, title="Hi Low Super Long", minval=0, step=50)

openLongZoneRsi = input(defval=54, title="Open Long Zone RSI", minval=0, step=1)
openShortZoneRsi = input(defval=30, title="Open Short Zone RSI", minval=0, step=1)
addLongZoneRsi = input(defval=46, title="Add Long Zone RSI", minval=0, step=1)
addShortZoneRsi = input(defval=40, title="Add Short Zone RSI", minval=0, step=1)
rsiCloseLongZone = input(defval=73, title="Close Long Zone RSI", minval=0, step=1) // 72
rsiCloseShortZone = input(defval=75, title="Close Short Zone RSI", minval=0, step=1) // 73

// shortShortZoneRsi = input(defval=69, title="Short Short Zone RSI", minval=0, step=1)
// rsiCloseShortShortZone = input(defval=16, title="Close Short Zone RSI", minval=0, step=1)

maxAdds = input(defval=4, title="Max Adds", minval=0, step=1)

macdLength = 30 // input(defval=30, title="MACD Bars", minval=0, step=5)

closeLongPerc = input(title="Close Long Min (%)", type=input.float, minval=0.0, step=0.05, defval=1.6) * 0.01
longTrailPerc = input(title="Long Trail Stop (%)", type=input.float, minval=0.0, step=0.1, defval=6.2) * 0.01
// shortTrailPerc = input(title="Short Trail Stop (%)", type=input.float, minval=0.0, step=0.1, defval=3.5) * 0.01

addPercDiff = input(title="Add % Diff", type=input.float, minval=0.0, step=0.01, defval=0.16) * 0.01

// closeShortPerc = input(title="Close Short Min (%)", type=input.float, minval=0.0, step=0.1, defval=0.4) * 0.01

showSlow = input(defval=true, title="Show Slow", type=input.bool)
// addOnLows = input(defval=false, title="Add On Lows", type=input.bool)
// reopenOnHighs = input(defval=false, title="Reopen on new highs", type=input.bool)
allowFastMacdLongs = input(defval=true, title="Fast Macd Longs", type=input.bool)
// dramaticRsis = input(defval=true, title="Dramatic RSIs", type=input.bool)

// TAKE PROF
// longProfitPerc = input(title="Long Take Profit (%)",
//      type=input.float, minval=0.0, step=0.1, defval=6.0) / 100

// shortProfitPerc = input(title="Short Take Profit (%)",
//      type=input.float, minval=0.0, step=0.1, defval=6.0) / 100

// longTakeProf  = strategy.position_avg_price * (1 + longProfitPerc)
// shortTakeProf = strategy.position_avg_price * (1 - shortProfitPerc)

// TRAIL STOP
longStopPrice = 0.0

longStopPrice := if (strategy.position_size > 0)
    stopValue = strategy.position_avg_price * (1 - longTrailPerc)
    max(stopValue, longStopPrice[1]) // max allows for trailing stop
else
    0

// shortStopPrice = 0.0

// shortStopPrice := if (strategy.position_size < 0)
//     stopValue = strategy.position_avg_price * (1 + shortTrailPerc)
//     min(stopValue, shortStopPrice[1])
// else
//     999999


closeLongAfter = strategy.position_avg_price * (1 + (1 * closeLongPerc))


// MACD and RSI
fast = 12, slow = 26
fastMA = ema(close, fast)
slowMA = ema(close, slow)
macd = fastMA - slowMA
signal = ema(macd, 9)
rsiClose = rsi(close, 14)

getMACD(index) =>
    thisFastMA = ema(close[index], fast)
    thisSlowMA = ema(close[index], slow)
    thisMacd = thisFastMA - thisSlowMA

getRsi(index) =>
    thisRsi = rsi(close[index], 14)

getHighest(index, speed) =>
    thisHighest = highest(high, speed)[index]

getLowest(index, speed) =>
    thisLowest = lowest(low, speed)[index]

macd0 = getMACD(0)
macd1 = getMACD(1)
macd2 = getMACD(2)
macd3 = getMACD(3)

rsi0 = getRsi(0)
rsi1 = getRsi(1)
rsi2 = getRsi(2)
rsi3 = getRsi(3)
rsi4 = getRsi(4)

highestMacd = highest(macd, macdLength)[1]
highestMacd2 = highest(macd, macdLength)[2]
highestMacd3 = highest(macd, macdLength)[3]
highestMacd4 = highest(macd, macdLength)[4]
lowestMacd = lowest(macd, macdLength)[1]
lowestMacd2 = lowest(macd, macdLength)[2]
lowestMacd3 = lowest(macd, macdLength)[3]
lowestMacd4 = lowest(macd, macdLength)[4]
higherMacd = macd > highestMacd and macd > 0
higherMacd2 = macd1 > highestMacd2 and macd1 > 0
higherMacd3 = macd2 > highestMacd3 and macd2 > 0
higherMacd4 = macd3 > highestMacd4 and macd3 > 0
lowerMacd = (allowFastMacdLongs and longZone and macd < lowestMacd) or (macd < lowestMacd and macd < 0)
lowerMacd2 = (allowFastMacdLongs and longZone and macd1 < lowestMacd2) or (macd1 < lowestMacd2 and macd1 < 0)
lowerMacd3 = macd2 < lowestMacd3 and macd2 < 0
lowerMacd4 = macd3 < lowestMacd4 and macd3 < 0
bgcolor(color=higherMacd ? color.green : lowerMacd ? color.red : na, transp=90)


// PLOT SUPPORT/RESISTANCE
// highestFast0 = getHighest(0, hiLowFast)
// highestFast1 = getHighest(1, hiLowFast)
// highestFast2 = getHighest(2, hiLowFast)
// highestFast3 = getHighest(3, hiLowFast)
// lowestFast0 = getLowest(0, hiLowFast)
// lowestFast1 = getLowest(1, hiLowFast)
// lowestFast2 = getLowest(2, hiLowFast)
// lowestFast3 = getLowest(3, hiLowFast)
highestSlow1 = getHighest(1, hiLowSlow)
highestSlow2 = getHighest(2, hiLowSlow)
highestSlow3 = getHighest(3, hiLowSlow)
lowestSlow1 = getLowest(1, hiLowSlow)
lowestSlow2 = getLowest(2, hiLowSlow)
lowestSlow3 = getLowest(3, hiLowSlow)

// plot(series=highestFast1, color=color.green, linewidth=1)
// plot(series=lowestFast1, color=color.red, linewidth=1)
plot(series=showSlow ? highestSlow1 : na, color=color.green, linewidth=2)
plot(series=showSlow ? lowestSlow1 : na, color=color.red, linewidth=2)

// lowestSlow2 because I want to make sure it's not coming up to meet it. it needs to be a true low
oneSlowLow = close < lowestSlow1 and close < lowestSlow2
oneSlowHigh = close > highestSlow1 and close > highestSlow2
// oneSuperSlowLow = close < hiLowSuperSlow
// twoSlowLows = oneSlowLow[1] and oneSlowLow
// twoSlowHighs = oneSlowHigh[1] and oneSlowHigh
// oneFastLow = longZone and low < lowestFast2
// oneFastHigh = shortZone and high > highestFast2


// CONFIGURE SHORT/LONG ZONES
if oneSlowLow
    lowSlowCount := lowSlowCount + 1

if oneSlowHigh
    highSlowCount := highSlowCount + 1

if 

if lowSlowCount == 2
    firstAction := longZone or firstAction
    shortZone := true
    longZone := false
    highSlowCount := 0
    lowSlowCount := 0
    highFastCount := 0
    lowFastCount := 0

if highSlowCount == 2
    firstAction := shortZone or firstAction
    longZone := true
    shortZone := false
    lowSlowCount := 0
    highSlowCount := 0
    highFastCount := 0
    lowFastCount := 0

bgColor2 = shortZone ? color.red : longZone ? color.green : na
bgcolor(color=bgColor2, transp=85)
plotshape(shortZone, title="shortzone", style=shape.cross, location=location.abovebar, size=size.tiny, color=color.red, textcolor=color.white, transp=0, display=display.none)

// bgcolor(color=close < prevPriceLow ? color.blue : na)

// HELPER VARIABLES
macdBottomed = macd > macd1 and macd1 < macd2 and macd1 < signal
macdSlowingDown = abs(macd - macd1) < abs(macd1 - macd2)
macdTopped = macd < macd1 and macd1 > macd2 and macd1 > signal
macdBelow0 = macd1 < 0
rsiBottomed = rsiClose > rsi1 and rsi1 < rsi2
rsiTopped = rsiClose < rsi1 and rsi1 > rsi2
rsiDecreasing = rsiClose < rsi2
rsiIncreasing = rsiClose > rsi2
lowestPrevMacd = lowerMacd2 and macd > lowestMacd
highestPrevMacd = higherMacd2 and macd < highestMacd


longZoneSetup = longZone and (((rsiBottomed and macdBottomed and lowerMacd2) or (macdSlowingDown and rsiIncreasing)) and (rsi1 < openLongZoneRsi))
shortZoneSetup = shortZone and (((rsiBottomed and macdBottomed and lowerMacd2) or (macdSlowingDown and rsiIncreasing)) and (rsi1 < openShortZoneRsi))

addLongZoneSetup = longZone and longCount < maxAdds and close < prevPriceLow and rsi1 < addLongZoneRsi and (rsiBottomed and (macdBottomed or (macdSlowingDown and rsiIncreasing) or (rsi1 < 33)))
addShortZoneSetup = shortZone and longCount < maxAdds and rsi1 < addShortZoneRsi and (rsiBottomed and (macdBottomed or rsiIncreasing))

closeLongZoneSetup = longZone and (rsiTopped and rsiDecreasing and rsi1 > rsiCloseLongZone and close > closeLongAfter) or (low < longStopPrice)
closeShortZoneSetup = shortZone and (rsiTopped and rsiDecreasing and rsi1 > rsiCloseShortZone and close > closeLongAfter) or (low < longStopPrice)


shortSetup = shortZone and ((rsiTopped and ((macdTopped and (higherMacd2)) or (macdSlowingDown and rsiDecreasing))))
addShortZoneSetup = shortZone and ((rsiTopped and (macdTopped or (macdSlowingDown and rsiDecreasing)) and ((higherMacd2) and (rsi1 > shortShortZoneRsi))))
closeShortSetup = (rsiBottomed and rsiIncreasing and rsi1 < rsiCloseShortZone) or (high > shortStopPrice)


// STRAT SETUP
long = not isLong and (longZoneSetup or shortZoneSetup)
addLong = isLong and (addLongZoneSetup or addShortZoneSetup)
closeLong = isLong and (closeLongZoneSetup or closeShortZoneSetup)
// short = not isShort and shortSetup
// addShort = isShort and addShortSetup
// closeShort = isShort and closeShortSetup

stopped = low < longStopPrice
if stopped
    stoppedOut := true
    prevPriceLow := 0

if long
    isLong := true
    isShort := false
    stoppedOut := false
    entryPrice := open
    prevPriceLow := open * (1 - addPercDiff)
    longCount := 0

if addLong
    longCount := longCount + 1
    prevPriceLow := open * (1 - addPercDiff)
    stoppedOut := false

if closeLong
    isLong := false
    stoppedOut := false
    addHighCount := 0
    addLowCount := 0
    prevPriceLow := 0
    longCount := 0
    
bgcolor(color=isLong ? color.blue : na, transp=92)

// STRAT ENTRIES/EXITS
strategy.entry("long", long=true, when=long and isWithinTimeBounds)
strategy.order("long", long=true, when=addLong and isWithinTimeBounds, comment="add")
strategy.close("long", when=(closeLong or stopped) and isWithinTimeBounds)
// strategy.entry("short", long=false, when=short and isWithinTimeBounds)
// strategy.order("short", long=false, when=addShort and isWithinTimeBounds, comment="add")
// strategy.close("short", when=closeShort and isWithinTimeBounds)


plotshape(firstAction and longZone and long, title="buybags", style=shape.cross, location=location.abovebar, size=size.tiny, color=color.green, textcolor=color.white, transp=0)
plotshape(firstAction and shortZone and closeLong, title="sellbags", style=shape.xcross, location=location.abovebar, size=size.tiny, color=color.red, textcolor=color.white, transp=0)

if firstAction and shortZone and closeLong
    firstAction := false

if firstAction and longZone and long
    firstAction := false


// if (strategy.position_size > 0)
//     strategy.exit("stop close", "long", stop=longStopPrice)

// if (strategy.position_size < 0)
//     strategy.exit("stop close", "short", stop=shortStopPrice)

if (strategy.position_size == 0) // and (longZone or (shortZone and not long[0])))
    isLong := false
    isShort := false
    longCount := 0
    prevPriceLow := 0
    // lastMacd := 0.0
    // lastRsi := 0.0
    // entryPrice := 0.0